Aqui vou colocar os comandos que forem usados nas aulas, para configuração do ORM

Acessar MYSQL pelo terminal:
mysql -h localhost -u root -p
Colocar a senha do usuário root do MYSQL, não do Linux

mysql      -- evocamos o servidor
-h         -- dizemos que o próximo dado é referente ao host
localhost  -- informamos o o host
-u         -- dizemos que o próximo dado é referente ao usuário
root       -- informamos o usuário
-p         -- dizemos que o próximo dado é referente a senha


use escola_ingles;  --Altera para o BD especificado

show tables; --Mostra as tabelas

describe Pessoas; --Mostra detalhes da tabela

Criando modelos:
npx sequelize-cli model:generate --name Pessoas --attributes nome:string,ativo:boolean,email:string,role:string

Rodando Migrações:
npx sequelize-cli db:migrate

Populando o banco:
npx sequelize-cli seed:generate --name demo-pessoa

npx sequelize-cli db:seed:all


Faça como eu fiz: 

- Desfazendo operações
npx sequelize-cli db:migrate:undo
ou
db:migrate:undo --name [data-hora]-create-[nome-da-tabela].js

- Desfazendo seeds
npx sequelize db:seed:undo //Para desfazer o último seed feito.
ou
npx sequelize-cli db:seed:undo --seed nome-do-arquivo //Para desfazer seeds de uma tabela específica.
ou 
npx sequelize-cli db:seed:undo:all // Para desfazer todos os seeds feitos.

Também usado o mesmo fonte para o Curso de
ORM com NodeJS: Avançando nas funcionalidades do Sequelize

Requisitos:

Recebemos uma lista de funcionalidades que o cliente deseja implementar, agora que o CRUD básico foi feito e o sistema está funcionando.

Ok - O cliente não gostaria que registros importantes do sistema, como as Pessoas, sejam apagados definitivamente do banco de dados.

Para deixar a interface mais limpa, o cliente gostaria que na lista de Pessoas, por padrão, fossem exibidos somente os usuários ativos.

Foram percebidas algumas falhas de validação dos formulários por parte do front-end, o que resultou em dados de email inválidos no banco. É desejável que essa validação não seja responsabilidade exclusiva do front.

É importante poder consultar todas as matrículas confirmadas referentes a estudante X de forma rápida.

O cliente gostaria de poder consultar as turmas abertas por intervalo de data, para não receber informações desnecessárias (como turmas antigas).

O cliente quer poder consultar as matrículas por turma e saber quais delas estão lotadas, para organizar melhor as matrículas.

O cliente gostaria que, uma vez que o cadastro de um estudante fosse desativado, todas as matrículas relativas a este estudante automaticamente passassem a constar como “canceladas”.

Durante o projeto vamos analisar esta lista e transformar esses requisitos em novas funcionalidades.